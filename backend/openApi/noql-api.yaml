openapi: 3.0.3
info:
  title: NoQL API
  version: 1.0.0
  description: NoQL API
  contact:
    name: NoQL Team
    email: babakhonza@gmail.com
servers:
  - url: http://localhost:8080
    description: Development server
tags:
  - name: Database
    description: Everything about database
  - name: chat
    description: Everything about chat
paths:
  /database:
    get:
      tags:
        - Database
      summary: Get all databases
      responses:
        '200':
          description: A list of databases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
    post:
      tags:
        - Database
      summary: Create a new database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
      responses:
        '201':
          description: Created database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          description: Invalid input
  /database/{databaseId}:
    get:
      tags:
        - Database
      summary: Get a database by ID
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '200':
          description: A database of specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '404':
          description: Database of specified ID not found
    put:
      tags:
        - Database
      summary: Update a database by ID
      description: Update provided non-null fields.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest'
      responses:
        '200':
          description: Updated database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '404':
          description: Database of specified ID not found
        '400':
          description: Invalid input
    delete:
      tags:
        - database
      summary: Delete a database by ID
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '204':
          description: No content

components:
  schemas:

    Database:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/DatabaseName'
        host:
          $ref: '#/components/schemas/DatabaseHost'
        port:
          $ref: '#/components/schemas/DatabasePort'
        database:
          $ref: '#/components/schemas/DatabaseDatabase'
        username:
          $ref: '#/components/schemas/DatabaseUsername'
        password:
          $ref: '#/components/schemas/DatabasePassword'
        engine:
          $ref: '#/components/schemas/DatabaseEngine'
        isSQL:
          $ref: '#/components/schemas/DatabaseIsSQL'

    CreateDatabaseRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatabaseName'
        host:
          $ref: '#/components/schemas/DatabaseHost'
        port:
          $ref: '#/components/schemas/DatabasePort'
        database:
          $ref: '#/components/schemas/DatabaseDatabase'
        username:
          $ref: '#/components/schemas/DatabaseUsername'
        password:
          $ref: '#/components/schemas/DatabasePassword'
        engine:
          $ref: '#/components/schemas/DatabaseEngine'
        isSQL:
          $ref: '#/components/schemas/DatabaseIsSQL'

    UpdateDatabaseRequest:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/DatabaseName'
            - nullable: true
        host:
          allOf:
            - $ref: '#/components/schemas/DatabaseHost'
            - nullable: true
        port:
          allOf:
            - $ref: '#/components/schemas/DatabasePort'
            - nullable: true
        database:
          allOf:
            - $ref: '#/components/schemas/DatabaseDatabase'
            - nullable: true
        username:
          allOf:
            - $ref: '#/components/schemas/DatabaseUsername'
            - nullable: true
        password:
          allOf:
            - $ref: '#/components/schemas/DatabasePassword'
            - nullable: true
        engine:
          allOf:
            - $ref: '#/components/schemas/DatabaseEngine'
            - nullable: true
        isSQL:
          allOf:
            - $ref: '#/components/schemas/DatabaseIsSQL'
            - nullable: true

    UUID:
      type: string
      format: uuid
      example: "98f2f987-da0e-4b37-afc5-839bd0e5b803"

    DatabaseName:
      type: string
      minLength: 1
      maxLength: 32
      example: "My eshop Postgres"

    DatabaseHost:
      type: string
      example: "localhost"

    DatabasePort:
      type: integer
      example: 5432

    DatabaseDatabase:
      type: string
      example: "eshop"

    DatabaseUsername:
      type: string
      example: "admin"

    DatabasePassword:
      type: string
      example: "admin1234"

    DatabaseEngine:
      type: string
      enum:
        - POSTGRES
        - MYSQL

    DatabaseIsSQL:
      type: boolean
      example: true

  parameters:

    databaseId:
      name: databaseId
      in: path
      required: true
      description: ID of the database to get
      schema:
        $ref: '#/components/schemas/UUID'