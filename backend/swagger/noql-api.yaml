openapi: 3.0.3
info:
  title: NoQL API
  version: 1.0.0
  description: NoQL API
  contact:
    name: NoQL Team
    email: babakhonza@gmail.com
servers:
  - url: http://localhost:8080
    description: Development server
tags:
  - name: Auth
    description: Everything about authentication and new user registration
  - name: User
    description: Everything about users
  - name: Database
    description: Everything about database
  - name: Chat
    description: Everything about chat
  - name: Settings
    description: Everything about settings

security:
  - BearerAuth: [ ]

paths:

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register (create) a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Bad reqeust - invalid input

  /auth/authenticate:
    post:
      tags:
        - Auth
      summary: Authenticate existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Authenticated in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid credentials

  /auth/refreshToken:
    post:
      tags:
        - Auth
      summary: Refresh access and refresh token
      description: >
        Refresh access and refresh token. The refresh token is used to get a new access token when the access token
        expires. The refresh token is valid for 7 days. The access token is valid for 30 minutes.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Refresh token
              example: "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJiYWJrYUBlbWFpbC5jb20iLCJpYXQiOjE3Mjc3ODAyMjEsImV4cCI6MTcyNzc4MDI4MX0.L7FlXwIWF71d4ozC2ED5fK1Dd_KPG6Ut4Q_Ch8K2U8drCMYsskrvF7XUBNdDdN7TFdTD2ON9ZKygEL8nNPYcQA"
      responses:
        '200':
          description: Refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Bad request - token not provided
        '401':
          description: Unauthorized - expired or invalid token

  /user:
    get:
      tags:
        - User
      summary: Get all users.
      description: Get information about all users. Role ADMIN is required.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN

  /user/{userId}:
    get:
      tags:
        - User
      security:
        - BearerAuth: [ ]
      summary: Get a user by ID.
      description: Role USER can request only his own data. Role ADMIN can request any user data.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: A user of specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN and tries to access data of a different user
        '404':
          description: User of specified ID not found
    put:
      tags:
        - User
      security:
        - BearerAuth: [ ]
      summary: Update a user by ID
      description: Update provided non-null fields. Role USER can update only his own data. Role ADMIN can update any user data. Role USER can't update role.
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN and tries to update data of a different user
        '404':
          description: User of specified ID not found

    delete:
      tags:
        - User
      security:
        - BearerAuth: [ ]
      summary: Delete a user by ID
      description: Role USER can delete only his own data. Role ADMIN can delete any user data.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN and tries to delete data of a different user

  /database:
    get:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Get all databases.
      description: Role USER can request only his own databases. Role ADMIN can request any database.
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
      responses:
        '200':
          description: A list of databases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN owner of the database
    post:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Create a new database
      description: Role USER can create only his own databases. Role ADMIN can create any database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
      responses:
        '201':
          description: Created database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or tries to create a database for a different user

  /database/{databaseId}:
    get:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Get a database by ID
      description: Role USER can request only his own databases. Role ADMIN can request any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '200':
          description: A database of specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found
    put:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Update a database by ID
      description: Update provided non-null fields. Role USER can update only his own databases. Role ADMIN can update any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest'
      responses:
        '200':
          description: Updated database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found
    delete:
      tags:
        - Database
      summary: Delete a database by ID
      description: Role USER can delete only his own databases. Role ADMIN can delete any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database

  /database/{databaseId}/query/chat:
    post:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Query a database by chat of messages
      description: >
        Query a database by chat of messages. The LLM translates the natural language query to a database query and
        returns requested data and/or a plot. Role USER can query only his own databases. Role ADMIN can query any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
        - $ref: '#/components/parameters/pageSize'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: >
            Query result with retrieved data. Or query result with error message if the LLM is not able to translate the
            natural language query to a database query or generate the plot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found

  /database/{databaseId}/query/loadChatResult:
    post:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Load chat resul of existing chat
      description: Role USER can load chat only related to his own databases. Role ADMIN can query any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
        - $ref: '#/components/parameters/chatIdQuery'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: >
            Query result with retrieved data. Or query result with error message if the LLM is not able to translate the
            natural language query to a database query or generate the plot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of chat of specified ID not found.

  /database/{databaseId}/query/queryLanguage:
    post:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Query a database by database query language.
      description: >
        Query a database by database query language. Return retrieved rows of data or error message if the query is invalid. Role USER can query only his own databases. Role ADMIN can query any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Valid database query language (SQL, ...)
              example: "SELECT name, email from public.user ORDER BY age;"
      responses:
        '200':
          description: >
            Query result with retrieved data. Or query result with error message if the query is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
              example:
                data:
                  columnNames: [ "name", "email" ]
                  rows: [ [ "Alice", "alice@gmail.com" ], [ "Bob", "bob@icloud.com" ], [ "Eva", "eva.hotmail.com" ] ]
                totalCount: 3
                chatQueryWithResponse:
                  id: "98f2f987-da0e-4b37-afc5-839bd0e5b803"
                  nlQuery: null
                  llmResult:
                    databaseQuery: "SELECT name, email from public.user ORDER BY age;"
                    plotUrl: null
                  timestamp: "2024-05-24T18:40:24.649+00:00"
                  errorMessage: null

        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found

  /database/{databaseId}/structure:
    get:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Get database structure
      description: >
        Get database structure. Return a list of schemas with tables with columns and types (if the database is SQL) or other form of structure. Role USER can request only his own databases. Role ADMIN can request any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '200':
          description: >
            Database structure with a list of tables with their columns and types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlDatabaseStructure'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found

  /database/{databaseId}/createScript:
    get:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Get database creation script
      description: >
        Get database creation script. Return a script to create the database with all schemas, tables, and columns. This
        script is retrieved by heuristic methods and may not be 100% accurate or syntactically correct. It is used as
        input from LLM, not for direct execution. Role USER can request only his own databases. Role ADMIN can request
        any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '200':
          description: Database create script
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DatabaseCreateScript'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found

  /database/{databaseId}/chats:
    get:
      tags:
        - Database
      security:
        - BearerAuth: [ ]
      summary: Get all chats of a database.
      description: >
        Get all chats of a database. Return a list of chats only with their names and identifiers.
        Role USER can request only his own databases. Role ADMIN can request any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '200':
          description: A list of chats of a database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatHistoryItem'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database
        '404':
          description: Database of specified ID not found

  /chat:
    post:
      tags:
        - Chat
      security:
        - BearerAuth: [ ]
      summary: Create new chat
      description: >
        Create a new chat associated with specified database. Default chat name is "New chat".
        Role USER can create only chats associated with his own databases. Role ADMIN can create chats associated with
        any database.
      parameters:
        - $ref: '#/components/parameters/databaseId'
      responses:
        '201':
          description: Created chat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
              example:
                id: "98f2f987-da0e-4b37-afc5-839bd0e5b803"
                name: "New chat"
                messages: [ ]
                modificationDate: "2024-05-24T18:40:24.649+00:00"
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the database to which the chat is associated
        '404':
          description: Database of specified ID not found

  /chat/{chatId}:
    get:
      tags:
        - Chat
      security:
        - BearerAuth: [ ]
      summary: Get a chat by ID
      description: Role USER can request only his own chats. Role ADMIN can request any chat.
      parameters:
        - $ref: '#/components/parameters/chatIdPath'
      responses:
        '200':
          description: A chat of specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of database to which the chat is associated
        '404':
          description: Chat of specified ID not found
    delete:
      tags:
        - Chat
      security:
        - BearerAuth: [ ]
      summary: Delete chat by ID
      description: Role USER can delete only his own chats. Role ADMIN can delete any chat.
      parameters:
        - $ref: '#/components/parameters/chatIdPath'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of database to which the chat is associated

  /chat/{chatId}/name:
    put:
      tags:
        - Chat
      security:
        - BearerAuth: [ ]
      summary: Rename chat by ID
      description: Role USER can rename only his own chats. Role ADMIN can rename any chat.
      parameters:
        - $ref: '#/components/parameters/chatIdPath'
        - name: name
          in: query
          description: New name
          required: true
          schema:
            $ref: '#/components/schemas/ChatName'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of database to which the chat is associated

  /chat/{chatId}/messages:
    post:
      tags:
        - Chat
      security:
        - BearerAuth: [ ]
      summary: Add message to chat.
      description: >
        Add message to chat. Used only for development purposes. Does not verify if the message is valid.
        Role USER can add messages only to his own chats. Role ADMIN can add messages to any chat.
      parameters:
        - $ref: '#/components/parameters/chatIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatQueryWithResponseRequest'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of database to which the chat is associated

  /settings:
    get:
      tags:
        - Settings
      summary: Get application settings
      description: Role ADMIN is required.
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Application settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN

  /model:
    get:
      tags:
        - Model
      summary: Get all custom models
      description: >
        Get all custom models. Role USER can request only his own models. Role ADMIN can request any model.
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
      responses:
        '200':
          description: A list of custom models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomModel'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the model

    post:
      tags:
        - Model
      summary: Create a new custom model
      description: Role USER can create only his own models. Role ADMIN can create any model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomModel'
      responses:
        '201':
          description: Created custom model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomModel'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or tries to create a model for a different user

  /model/all:
    get:
      tags:
        - Model
      summary: Get all models (custom and default models like GPT, ...)
      description: >
        Get all models. Role USER can request only his own models. Role ADMIN can request any model.
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
      responses:
        '200':
          description: A list of models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelOption'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN of those models

  /model/{modelId}:
    get:
      tags:
        - Model
      summary: Get a custom model by ID
      description: Role USER can request only his own models. Role ADMIN can request any model.
      parameters:
        - $ref: '#/components/parameters/modelId'
      responses:
        '200':
          description: A custom model of specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomModel'
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the model
        '404':
          description: Custom model of specified ID not found

    put:
      tags:
        - Model
      summary: Update a custom model by ID
      description: Update provided non-null fields. Role USER can update only his own models. Role ADMIN can update any model.
      parameters:
        - $ref: '#/components/parameters/modelId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomModel'
      responses:
        '200':
          description: Updated custom model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomModel'
        '400':
          description: Bad request - invalid input
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the model
        '404':
          description: Custom model of specified ID not found

    delete:
      tags:
        - Model
      summary: Delete a custom model by ID
      description: Role USER can delete only his own models. Role ADMIN can delete any custom model.
      parameters:
        - $ref: '#/components/parameters/modelId'
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized - invalid or expired access token
        '403':
          description: Forbidden - user is not an ADMIN or owner of the model

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    RegisterRequest:
      type: object
      properties:
        firstName:
          $ref: '#/components/schemas/NameOfUser'
        lastName:
          allOf:
            - $ref: '#/components/schemas/NameOfUser'
            - example: "Doe"
        email:
          $ref: '#/components/schemas/UserEmail'
        password:
          $ref: '#/components/schemas/UserPassword'

    AuthenticateRequest:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/UserEmail'
        password:
          $ref: '#/components/schemas/UserPassword'

    AuthenticationResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/JwtToken'
        refreshToken:
          $ref: '#/components/schemas/JwtToken'
        user:
          $ref: '#/components/schemas/User'

    JwtToken:
      description: JWT authentication token
      type: string
      example: "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJob256YUBnbWFpbC5jb20iLCJpYXQiOjE3MjYxNDc0NzMsImV4cCI6MTcyNjIzMzg3M30.yBp1rV0KP2GpT1pQMz6N5AKPfVoCdimdjG4S9JJ0VuaR7p-LRwJMQjzjvlAgSAru6gzhpvBBJIwcFfgE3cXpSA"

    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        firstName:
          $ref: '#/components/schemas/NameOfUser'
        lastName:
          allOf:
            - $ref: '#/components/schemas/NameOfUser'
            - example: "Doe"
        email:
          $ref: '#/components/schemas/UserEmail'
        password:
          $ref: '#/components/schemas/UserPassword'
        role:
          $ref: '#/components/schemas/UserRole'
        queryLimit:
          $ref: '#/components/schemas/UserQueryLimit'

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          allOf:
            - $ref: '#/components/schemas/NameOfUser'
            - nullable: true
        lastName:
          allOf:
            - $ref: '#/components/schemas/NameOfUser'
            - nullable: true
            - example: "Doe"
        email:
          allOf:
            - $ref: '#/components/schemas/UserEmail'
            - nullable: true
        password:
          allOf:
            - $ref: '#/components/schemas/UserPassword'
            - nullable: true
        role:
          allOf:
            - $ref: '#/components/schemas/UserRole'
            - nullable: true
        queryLimit:
          allOf:
            - $ref: '#/components/schemas/UserQueryLimit'
            - nullable: true

    NameOfUser:
      description: First or last name of user
      type: string
      minLength: 1
      maxLength: 32
      example: "John"

    UserEmail:
      description: Email of user - used as username
      type: string
      format: email
      maxLength: 64
      example: "john.doe@gmail.com"

    UserPassword:
      description: Password of user
      type: string
      minLength: 8
      maxLength: 64
      example: "password1234"

    UserRole:
      type: string
      enum:
        - ADMIN
        - USER

    UserQueryLimit:
      type: number
      minimum: 0
      example: 100

    Database:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/DatabaseName'
        host:
          $ref: '#/components/schemas/DatabaseHost'
        port:
          $ref: '#/components/schemas/DatabasePort'
        database:
          $ref: '#/components/schemas/DatabaseDatabase'
        username:
          $ref: '#/components/schemas/DatabaseUsername'
        password:
          $ref: '#/components/schemas/DatabasePassword'
        engine:
          $ref: '#/components/schemas/DatabaseEngine'
        isSQL:
          type: boolean
          example: true
        userId:
          $ref: '#/components/schemas/UUID'

    CreateDatabaseRequest:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatabaseName'
        host:
          $ref: '#/components/schemas/DatabaseHost'
        port:
          $ref: '#/components/schemas/DatabasePort'
        database:
          $ref: '#/components/schemas/DatabaseDatabase'
        username:
          $ref: '#/components/schemas/DatabaseUsername'
        password:
          $ref: '#/components/schemas/DatabasePassword'
        engine:
          $ref: '#/components/schemas/DatabaseEngine'
        userId:
          $ref: '#/components/schemas/UUID'
        createDefaultChat:
          type: boolean
          example: true

    UpdateDatabaseRequest:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/DatabaseName'
            - nullable: true
        host:
          allOf:
            - $ref: '#/components/schemas/DatabaseHost'
            - nullable: true
        port:
          allOf:
            - $ref: '#/components/schemas/DatabasePort'
            - nullable: true
        database:
          allOf:
            - $ref: '#/components/schemas/DatabaseDatabase'
            - nullable: true
        username:
          allOf:
            - $ref: '#/components/schemas/DatabaseUsername'
            - nullable: true
        password:
          allOf:
            - $ref: '#/components/schemas/DatabasePassword'
            - nullable: true
        engine:
          allOf:
            - $ref: '#/components/schemas/DatabaseEngine'
            - nullable: true

    UUID:
      type: string
      format: uuid
      example: "98f2f987-da0e-4b37-afc5-839bd0e5b803"

    DatabaseName:
      description: Name of the database chosen by the user. It isn't used in the connection url.
      type: string
      minLength: 1
      maxLength: 32
      example: "My eshop Postgres"

    DatabaseHost:
      type: string
      minLength: 1
      maxLength: 253
      example: "localhost"

    DatabasePort:
      type: integer
      minimum: 1
      example: 5432

    DatabaseDatabase:
      description: Name of the database used in the connection url.
      type: string
      minLength: 1
      maxLength: 253
      example: "eshop"

    DatabaseUsername:
      description: Username of database user.
      type: string
      minLength: 1
      maxLength: 128
      example: "admin"

    DatabasePassword:
      type: string
      minLength: 1
      maxLength: 128
      example: "admin1234"

    DatabaseEngine:
      type: string
      enum:
        - POSTGRES
        - MYSQL

    QueryRequest:
      type: object
      properties:
        chatId:
          $ref: '#/components/schemas/UUID'
        query:
          $ref: '#/components/schemas/NaturalLanguageQuery'
        model:
          $ref: '#/components/schemas/LlmModel'

    LlmModel:
      description: Language model to use for translation
      type: string
      enum:
        - GPT_4o
        - GPT_4
        - GPT_4_TURBO
        - GPT_4_32K
        - GPT_3_5_TURBO
        - LLAMA3_70B
        - LLAMA3_13B_CHAT

    QueryResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/RetrievedData'
        totalCount:
          $ref: '#/components/schemas/TotalCount'
        chatQueryWithResponse:
          $ref: '#/components/schemas/ChatQueryWithResponse'
        errorMessage:
          allOf:
            - $ref: '#/components/schemas/QueryErrorMessage'
            - example: null

    RetrievedData:
      type: object
      description: Retrieved data from the database query in form of table.
      properties:
        columnNames:
          type: array
          items:
            type: string
          example: [ "sex", "count" ]
        rows:
          type: array
          items:
            type: array
            items:
              type: string
          example: [ [ "male", "8" ], [ "female", "2" ] ]

    TotalCount:
      description: Total number of rows in the database query result (number of items in all pages).
      type: integer
      format: int64
      example: 2

    ChatQueryWithResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        nlQuery:
          $ref: '#/components/schemas/NaturalLanguageQuery'
        llmResult:
          $ref: '#/components/schemas/LLMResult'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    CreateChatQueryWithResponseRequest:
      type: object
      properties:
        nlQuery:
          $ref: '#/components/schemas/NaturalLanguageQuery'
        llmResult:
          $ref: '#/components/schemas/LLMResult'
        timestamp:
          $ref: '#/components/schemas/Timestamp'

    NaturalLanguageQuery:
      type: string
      description: Natural language query
      example: "Plot sex of users older than 25"

    LLMResult:
      type: object
      properties:
        databaseQuery:
          type: string
          description: Query in database specific language (SQL, ...)
          example: "SELECT sex, COUNT(*) FROM public.user WHERE age > 25 GROUP BY sex;"
          nullable: true
        plotUrl:
          type: string
          description: URL to the plot if the users requested a plot
          example: "http://localhost:8080/static/images/13eae4d2-6d7b-41c6-93d0-8f16e4721504.png"
          nullable: true

    QueryErrorMessage:
      type: string
      nullable: true
      example: "Syntax error on position: 30. Table teachers does not exist."

    Timestamp:
      type: string
      format: date-time
      example: "2024-05-24T18:40:24.649+00:00"

    SqlDatabaseStructure:
      type: object
      properties:
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/SqlDatabaseSchema'

    SqlDatabaseSchema:
      type: object
      properties:
        name:
          type: string
          example: "public"
        tables:
          type: array
          items:
            $ref: '#/components/schemas/SqlDatabaseTable'

    SqlDatabaseTable:
      type: object
      properties:
        name:
          type: string
          example: "address"
        columns:
          type: array
          items:
            $ref: '#/components/schemas/SqlDatabaseColumn'

    SqlDatabaseColumn:
      type: object
      properties:
        name:
          type: string
          example: "user_id"
        dataType:
          type: string
          example: "integer"
        isPrimaryKey:
          type: boolean
          example: false
        foreignKey:
          $ref: '#/components/schemas/SqlDatabaseForeignKey'

    SqlDatabaseForeignKey:
      type: object
      nullable: true
      properties:
        referencedSchema:
          type: string
          example: "public"
        referencedTable:
          type: string
          example: "user"
        referencedColumn:
          type: string
          example: "id"

    DatabaseCreateScript:
      type: string
      description: >
        Database creation script that is retrieved by heuristic methods and may not be 100% accurate or syntactically
        correct. It is used as input from LLM, not for direct execution.
      example: >
        CREATE SCHEMA IF NOT EXISTS "public";

        CREATE TABLE IF NOT EXISTS public.stock_prices
        (
        	id INTEGER PRIMARY KEY,
        	ticker_name CHARACTER VARYING
        	price NUMERIC
        	timestamp TIMESTAMP WITHOUT TIME ZONE
        );

        CREATE TABLE IF NOT EXISTS public.database
        (
        	id UUID PRIMARY KEY,
        	database CHARACTER VARYING
        	password CHARACTER VARYING
        	engine SMALLINT
        	port INTEGER
        	user_name CHARACTER VARYING
        	host CHARACTER VARYING
        	name CHARACTER VARYING
        );

    ChatHistoryItem:
      type: object
      description: Chat with just name and identifier. Used in list of chats.
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/ChatName'

    Chat:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/ChatName'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatQueryWithResponse'
        modificationDate:
          $ref: '#/components/schemas/Timestamp'

    ChatName:
      type: string
      example: "Find oldest student"
      minLength: 1
      maxLength: 32

    Settings:
      type: object
      properties:
        maxPageSize:
          description: |
            Maximum number of items per page.<br />
            Maximum value is 50 and can be changed by environment variable `PAGINATION_MAX_PAGE_SIZE`.
          type: integer
          format: int32
          default: 50
          example: 50
        defaultPageSize:
          description: |
            Number of items per page.<br />
            Default value is 10 and can be changed by environment variable `PAGINATION_DEFAULT_PAGE_SIZE`.
          type: integer
          format: int32
          example: 10
        translationRetries:
          description: |
            Number of retries for query translation by LLM.<br />
            Default value is 3 and can be changed by environment variable `TRANSLATION_RETRIES`.
          type: integer
          format: int32
          example: 3

    CustomModel:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          $ref: '#/components/schemas/CustomModelName'
        host:
          $ref: '#/components/schemas/CustomModelHost'
        port:
          $ref: '#/components/schemas/CustomModelPort'
        userId:
          $ref: '#/components/schemas/UUID'

    CreateCustomModel:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/CustomModelName'
            - nullable: false
        host:
          allOf:
            - $ref: '#/components/schemas/CustomModelHost'
            - nullable: false
        port:
          allOf:
            - $ref: '#/components/schemas/CustomModelPort'
            - nullable: false
        userId:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - nullable: false

    UpdateCustomModel:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/CustomModelName'
            - nullable: true
        host:
          allOf:
            - $ref: '#/components/schemas/CustomModelHost'
            - nullable: true
        port:
          allOf:
            - $ref: '#/components/schemas/CustomModelPort'
            - nullable: true

    CustomModelName:
      type: string
      example: "My custom model"
      minLength: 1
      maxLength: 32

    CustomModelPort:
      type: integer
      example: 8080

    CustomModelHost:
      type: string
      example: "http://localhost"

    ModelOption:
      type: object
      properties:
        label:
          type: string
          example: "GPT 4"
        value:
          type: string
          example: "gpt-4"

  parameters:

    userId:
      name: userId
      in: path
      required: true
      description: ID of the user
      schema:
        $ref: '#/components/schemas/UUID'

    userIdQuery:
      name: userId
      in: query
      required: true
      description: ID of the user - used for filtering
      schema:
        $ref: '#/components/schemas/UUID'

    databaseId:
      name: databaseId
      in: path
      required: true
      description: ID of the database
      schema:
        $ref: '#/components/schemas/UUID'

    chatIdQuery:
      name: chatId
      in: query
      required: true
      description: ID of the chat
      schema:
        $ref: '#/components/schemas/UUID'

    chatIdPath:
      name: chatId
      in: path
      required: true
      description: ID of the chat
      schema:
        $ref: '#/components/schemas/UUID'

    pageSize:
      name: pageSize
      in: query
      required: false
      description: |
        Number of items per page.<br /> 
        Default value is 10 and can be changed by environment variable `PAGINATION_DEFAULT_PAGE_SIZE`.<br />
        Maximum value is 50 and can be changed by environment variable `PAGINATION_MAX_PAGE_SIZE`.
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 50

    page:
      name: page
      in: query
      required: false
      description: Page number. First page is 0.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
        maximum: 100

    modelId:
      name: modelId
      in: path
      required: true
      description: ID of the model
      schema:
        $ref: '#/components/schemas/UUID'
